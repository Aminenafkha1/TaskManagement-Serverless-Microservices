@using TaskManagement.Client.Services
@using MudBlazor
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inherits LayoutComponentBase

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

@if (isAuthenticated)
{
    <MudLayout>
        <MudAppBar Elevation="1">
            <MudIconButton Icon="Icons.Material.Filled.Task" Color="Color.Inherit" Edge="Edge.Start" />
            <MudText Typo="Typo.h6" Class="ml-3">TaskManager</MudText>
            <MudSpacer />
            <MudText Typo="Typo.body2" Class="mr-4">@currentUser?.FullName</MudText>
            <MudIconButton Icon="Icons.Material.Filled.Logout" Color="Color.Inherit" OnClick="HandleLogout" />
        </MudAppBar>
        
        <MudMainContent>
            <MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
                @Body
            </MudContainer>
        </MudMainContent>
    </MudLayout>
}
else
{
    <MudContainer MaxWidth="MaxWidth.Small" Class="d-flex align-center justify-center mud-height-full">
        @Body
    </MudContainer>
}

@code {
    private bool isAuthenticated = false;
    private UserInfo? currentUser;

    protected override async Task OnInitializedAsync()
    {
        await CheckAuthenticationStatus();
    }

    private async Task CheckAuthenticationStatus()
    {
        isAuthenticated = await AuthService.IsAuthenticatedAsync();
        if (isAuthenticated)
        {
            currentUser = await AuthService.GetCurrentUserAsync();
        }
        else
        {
            // Redirect to login if not authenticated and not already on auth pages
            var currentUri = Navigation.Uri;
            if (!currentUri.Contains("/login") && !currentUri.Contains("/register"))
            {
                Navigation.NavigateTo("/login");
            }
        }
    }

    private async Task HandleLogout()
    {
        await AuthService.LogoutAsync();
        isAuthenticated = false;
        currentUser = null;
        Navigation.NavigateTo("/login");
    }
}
