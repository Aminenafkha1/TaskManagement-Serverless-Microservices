@using TaskManagement.Client.Services
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService
@inherits LayoutComponentBase

<div class="page">

    @if (isAuthenticated)
    {
        <MudLayout>

            <MudAppBar Elevation="1" Color="Color.Primary" Fixed="true" Class="appbar">
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" OnClick="ToggleDrawer" Edge="Edge.Start" />
                <MudText Typo="Typo.h6" Class="ms-2 fw-bold brand">TaskManager</MudText>
                <MudTextField T="string" Placeholder="Search" Variant="Variant.Outlined" 
                              Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" 
                              Class="mx-4 d-none d-md-flex search" />
                <MudSpacer />
                <MudIconButton Icon="@Icons.Material.Filled.Notifications" Color="Color.Inherit" />
                <MudMenu Dense="true" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
                    <ActivatorContent>
                        <MudAvatar Class="ms-2" Icon="@Icons.Material.Filled.AccountCircle" Color="Color.Inherit" />
                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem OnClick="@(() => Navigation.NavigateTo("/profile"))">Profile</MudMenuItem>
                        <MudMenuItem OnClick="HandleLogout">Logout</MudMenuItem>
                    </ChildContent>
                </MudMenu>
            </MudAppBar>

            <MudDrawer Anchor="Anchor.Left" Open="@_drawerOpen" Elevation="1" Variant="DrawerVariant.Persistent" Width="300" Clipped="true">
                <MudDrawerHeader>
                    <MudText Typo="Typo.subtitle1">Navigation</MudText>
                </MudDrawerHeader>
                <MudNavMenu>
                    <MudNavLink Href="/dashboard" Icon="@Icons.Material.Filled.Dashboard">Dashboard</MudNavLink>
                    <MudNavLink Href="/tasks" Icon="@Icons.Material.Filled.List">Tasks</MudNavLink>
                    <MudNavLink Icon="@Icons.Material.Filled.AddCircle" OnClick="OpenCreateTaskDialog">Create Task</MudNavLink>
                    <MudNavLink Href="/reports" Icon="@Icons.Material.Filled.Assessment">Reports</MudNavLink>
                </MudNavMenu>
                <MudSpacer />
                <div class="pa-2">
                    <MudDivider Class="mb-2" />
                    <MudStack Direction="Row" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                        <MudAvatar Icon="@Icons.Material.Filled.Person" Size="Size.Medium" />
                        <MudTooltip Text="Logout">
                            <MudIconButton Icon="@Icons.Material.Filled.Logout" Color="Color.Error" OnClick="HandleLogout" />
                        </MudTooltip>
                    </MudStack>
                </div>
            </MudDrawer>

            <MudMainContent Class="@($"app-main-content {(_drawerOpen ? "with-drawer" : string.Empty)}")" Style="padding-top:64px">
                @Body
            </MudMainContent>

        </MudLayout>
    }
    else
    {
        <div class="auth-main">
            @Body
        </div>
    }

</div>

@code {
    private bool isAuthenticated = false;
    private UserInfo? currentUser;
    private bool _drawerOpen = true; // default opened
    private bool isOnDashboard = false;

    protected override async Task OnInitializedAsync()
    {
        await CheckAuthenticationStatus();
    }

    private async Task CheckAuthenticationStatus()
    {
        isAuthenticated = await AuthService.IsAuthenticatedAsync();
        if (isAuthenticated)
        {
            currentUser = await AuthService.GetCurrentUserAsync();
            UpdateRouteFlags();
        }
        else
        {
            // Redirect to login if not authenticated and not already on auth pages
            var currentUri = Navigation.Uri;
            if (!currentUri.Contains("/login") && !currentUri.Contains("/register"))
            {
                Navigation.NavigateTo("/login");
            }
        }
    }

    private async Task HandleLogout()
    {
        await AuthService.LogoutAsync();
        isAuthenticated = false;
        currentUser = null;
        Navigation.NavigateTo("/login");
    }

    private void ToggleDrawer() => _drawerOpen = !_drawerOpen;

    private string IsActive(string path)
    {
        return Navigation.Uri.Contains(path) ? "active" : "";
    }

    protected override void OnInitialized()
    {
        Navigation.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        UpdateRouteFlags();
        _drawerOpen = true; // keep opened on route change
        StateHasChanged();
    }

    private void UpdateRouteFlags()
    {
        var uri = Navigation.Uri.ToLowerInvariant();
        isOnDashboard = uri.Contains("/dashboard");
    }

    private async Task OpenCreateTaskDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
    var dialogRef = await DialogService.ShowAsync<TaskManagement.Client.Components.ComponentCreateTask>("Create Task", options);
    var dr = await dialogRef.Result;
    if (dr?.Data is bool success && success)
        {
            Navigation.NavigateTo("/tasks", forceLoad: false);
        }
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= OnLocationChanged;
    }
}
