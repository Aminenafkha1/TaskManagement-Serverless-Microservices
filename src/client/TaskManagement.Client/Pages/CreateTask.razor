@* @page "/tasks/create"
@using TaskManagement.Client.Services
@inject ITaskService TaskService
@inject NavigationManager Navigation

<PageTitle>Create Task - Task Management</PageTitle>

<!-- Page Header -->
<div class="d-flex justify-space-between align-center mb-6">
    <div>
        <MudText Typo="Typo.h4" Class="mb-2">
            <MudIcon Icon="Icons.Material.Filled.Add" Class="mr-3" />
            Create New Task
        </MudText>
        <MudText Typo="Typo.subtitle1" Color="Color.Secondary">
            Add a new task to track your progress and stay organized.
        </MudText>
    </div>
    <MudButton Variant="Variant.Outlined" 
              Color="Color.Secondary"
              StartIcon="Icons.Material.Filled.ArrowBack"
              OnClick="GoBack">
        Back to Tasks
    </MudButton>
</div>

<MudCard Elevation="2" Class="pa-4">
    <MudCardContent>
        <MudForm @ref="form" Model="@newTask">
            <MudGrid>
                <MudItem xs="12">
                    <MudTextField @bind-Value="newTask.Title" 
                                Label="Task Title" 
                                Variant="Variant.Outlined"
                                Required="true"
                                RequiredError="Task title is required"
                                MaxLength="100" />
                </MudItem>
                
                <MudItem xs="12">
                    <MudTextField @bind-Value="newTask.Description" 
                                Label="Description" 
                                Variant="Variant.Outlined"
                                Lines="4"
                                MaxLength="500"
                                Placeholder="Provide a detailed description of the task..." />
                </MudItem>
                
                <MudItem xs="12" md="6">
                    <MudSelect @bind-Value="newTask.Priority" 
                             Label="Priority" 
                             Variant="Variant.Outlined"
                             Required="true"
                             T="TaskManagement.Client.Services.TaskPriority">
                        <MudSelectItem Value="TaskManagement.Client.Services.TaskPriority.Low">Low</MudSelectItem>
                        <MudSelectItem Value="TaskManagement.Client.Services.TaskPriority.Medium">Medium</MudSelectItem>
                        <MudSelectItem Value="TaskManagement.Client.Services.TaskPriority.High">High</MudSelectItem>
                        <MudSelectItem Value="TaskManagement.Client.Services.TaskPriority.Critical">Critical</MudSelectItem>
                    </MudSelect>
                </MudItem>
                
                <MudItem xs="12" md="6">
                    <MudSelect @bind-Value="newTask.Status" 
                             Label="Status" 
                             Variant="Variant.Outlined"
                             Required="true"
                             T="TaskManagement.Client.Services.TaskStatus">
                        <MudSelectItem Value="TaskManagement.Client.Services.TaskStatus.ToDo">To Do</MudSelectItem>
                        <MudSelectItem Value="TaskManagement.Client.Services.TaskStatus.InProgress">In Progress</MudSelectItem>
                        <MudSelectItem Value="TaskManagement.Client.Services.TaskStatus.Completed">Completed</MudSelectItem>
                    </MudSelect>
                </MudItem>
                
                <MudItem xs="12" md="6">
                    <MudDatePicker @bind-Date="dueDate" 
                                 Label="Due Date" 
                                 Variant="Variant.Outlined"
                                 MinDate="DateTime.Today" />
                </MudItem>
                
                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="newTask.AssignedTo" 
                                Label="Assigned To (Optional)" 
                                Variant="Variant.Outlined"
                                Placeholder="Enter email address..." />
                </MudItem>
                
                <MudItem xs="12">
                    <MudTextField @bind-Value="newTask.Tags" 
                                Label="Tags (Optional)" 
                                Variant="Variant.Outlined"
                                Placeholder="e.g., urgent, project-alpha, bug-fix (comma separated)" />
                </MudItem>
            </MudGrid>
        </MudForm>
    </MudCardContent>
    
    <MudCardActions Class="d-flex justify-space-between">
        <MudButton Variant="Variant.Outlined" 
                  Color="Color.Secondary"
                  OnClick="GoBack">
            Cancel
        </MudButton>
        
        <div class="d-flex gap-2">
            <MudButton Variant="Variant.Outlined" 
                      Color="Color.Primary"
                      OnClick="SaveAsDraft">
                Save as Draft
            </MudButton>
            <MudButton Variant="Variant.Filled" 
                      Color="Color.Primary"
                      OnClick="SubmitTask"
                      Disabled="isCreating">
                @if (isCreating)
                {
                    <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                    <span>Creating...</span>
                }
                else
                {
                    <MudIcon Icon="Icons.Material.Filled.Save" Class="mr-2" />
                    <span>Create Task</span>
                }
            </MudButton>
        </div>
    </MudCardActions>
</MudCard>

@code {
    private MudForm? form;
    private TaskManagement.Client.Services.CreateTaskRequest newTask = new();
    private DateTime? dueDate;
    private bool isCreating = false;

    protected override void OnInitialized()
    {
        // Set default values
        newTask.Priority = TaskManagement.Client.Services.TaskPriority.Medium;
        newTask.Status = TaskManagement.Client.Services.TaskStatus.ToDo;
    }

    private async Task SubmitTask()
    {
        try
        {
            isCreating = true;
            
            // Validate form
            if (form != null)
            {
                await form.Validate();
                if (!form.IsValid)
                {
                    return;
                }
            }

            // Set due date if provided
            if (dueDate.HasValue)
            {
                newTask.DueDate = dueDate.Value;
            }

            // Create the task
            await TaskService.CreateTaskAsync(newTask);
            
            // Navigate back to tasks list
            Navigation.NavigateTo("/tasks");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating task: {ex.Message}");
            // TODO: Show error message to user
        }
        finally
        {
            isCreating = false;
        }
    }

    private async Task SaveAsDraft()
    {
        try
        {
            // Set status to a draft status if you have one
            var originalStatus = newTask.Status;
            newTask.Status = Models.TaskStatus.ToDo; // Use ToDo as draft for now
            
            await SubmitTask();
            
            newTask.Status = originalStatus;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving draft: {ex.Message}");
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/tasks");
    }
}
} *@
