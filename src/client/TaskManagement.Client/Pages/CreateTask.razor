@page "/tasks/create"
@using TaskManagement.Client.Services
@inject ITaskService TaskService
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation

<PageTitle>Create Task</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-xl-8 col-lg-10 mx-auto">
            <!-- Page Header -->
            <div class="d-sm-flex align-items-center justify-content-between mb-4">
                <h1 class="h3 mb-0 text-gray-800">Create New Task</h1>
                <button class="btn btn-secondary" @onclick="GoBack">
                    <i class="fas fa-arrow-left"></i> Back to Tasks
                </button>
            </div>

            <!-- Create Task Form -->
            <div class="card shadow">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Task Details</h6>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @errorMessage
                        </div>
                    }

                    <EditForm Model="@taskModel" OnValidSubmit="@HandleCreateTask">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger mb-3" />

                        <div class="row">
                            <div class="col-md-8">
                                <div class="mb-3">
                                    <label for="title" class="form-label">Title <span class="text-danger">*</span></label>
                                    <InputText id="title" class="form-control" @bind-Value="taskModel.Title" 
                                               placeholder="Enter task title..." />
                                    <ValidationMessage For="@(() => taskModel.Title)" />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    <label for="priority" class="form-label">Priority</label>
                                    <InputSelect id="priority" class="form-select" @bind-Value="taskModel.Priority">
                                        <option value="Low">Low</option>
                                        <option value="Medium">Medium</option>
                                        <option value="High">High</option>
                                        <option value="Critical">Critical</option>
                                    </InputSelect>
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="description" class="form-label">Description</label>
                            <InputTextArea id="description" class="form-control" rows="4" 
                                           @bind-Value="taskModel.Description"
                                           placeholder="Enter task description..." />
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="dueDate" class="form-label">Due Date</label>
                                    <InputDate id="dueDate" class="form-control" @bind-Value="taskModel.DueDate" />
                                </div>
                            </div>
                        </div>

                        <div class="d-flex justify-content-end">
                            <button type="button" class="btn btn-secondary me-2" @onclick="GoBack">
                                Cancel
                            </button>
                            <button type="submit" class="btn btn-primary" disabled="@isCreating">
                                @if (isCreating)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                    <span>Creating...</span>
                                }
                                else
                                {
                                    <i class="fas fa-save me-2"></i>
                                    <span>Create Task</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private CreateTaskRequest taskModel = new();
    private bool isCreating = false;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        if (!await AuthService.IsAuthenticatedAsync())
        {
            Navigation.NavigateTo("/login");
            return;
        }
    }

    private async Task HandleCreateTask()
    {
        try
        {
            isCreating = true;
            errorMessage = null;

            var createdTask = await TaskService.CreateTaskAsync(taskModel);
            
            if (createdTask != null)
            {
                // Navigate back to tasks list
                Navigation.NavigateTo("/tasks");
            }
            else
            {
                errorMessage = "Failed to create task. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error creating task: {ex.Message}";
        }
        finally
        {
            isCreating = false;
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/tasks");
    }
}
