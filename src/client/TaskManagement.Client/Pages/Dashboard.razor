@page "/dashboard"
@using TaskManagement.Client.Services
@inject ITaskService TaskService
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation
@inject IDialogService DialogService

<PageTitle>Dashboard - Task Management</PageTitle>

<MudContainer MaxWidth="MaxWidth.False" Class="pa-4">
    <MudText Typo="Typo.h5" Class="mb-1">Dashboard</MudText>
    <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-4">Welcome back. Here’s an overview of your work.</MudText>

    @if (isLoading)
    {
        <MudStack AlignItems="AlignItems.Center" Class="py-12">
            <MudProgressCircular Indeterminate="true" Size="Size.Large" />
            <MudText Class="mt-2">Loading your dashboard…</MudText>
        </MudStack>
    }
    else
    {
        <MudGrid Class="mb-4">
                    <MudItem xs="12" sm="6" md="3">
                        <MudCard Elevation="1"><MudCardContent>
                            <MudText Typo="Typo.h5">@((dashboardStats?.TotalTasks ?? 0).ToString())</MudText>
                            <MudText Color="Color.Secondary">Total Tasks</MudText>
                        </MudCardContent></MudCard>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="3">
                        <MudCard Elevation="1"><MudCardContent>
                            <MudText Typo="Typo.h5">@((dashboardStats?.CompletedTasks ?? 0).ToString())</MudText>
                            <MudText Color="Color.Secondary">Completed</MudText>
                        </MudCardContent></MudCard>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="3">
                        <MudCard Elevation="1"><MudCardContent>
                            <MudText Typo="Typo.h5">@((dashboardStats?.PendingTasks ?? 0).ToString())</MudText>
                            <MudText Color="Color.Secondary">Pending</MudText>
                        </MudCardContent></MudCard>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="3">
                        <MudCard Elevation="1"><MudCardContent>
                            <MudText Typo="Typo.h5">@((dashboardStats?.OverdueTasks ?? 0).ToString())</MudText>
                            <MudText Color="Color.Secondary">Overdue</MudText>
                        </MudCardContent></MudCard>
                    </MudItem>
        </MudGrid>

        <MudCard>
            <MudCardContent>
                    <MudStack Direction="Row" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-2">
                        <MudText Typo="Typo.h6">Recent Tasks</MudText>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenCreateTaskDialog" StartIcon="@Icons.Material.Filled.AddCircle">New Task</MudButton>
                    </MudStack>

                    @if (dashboardStats?.RecentTasks?.Any() == true)
                    {
                        <MudTable Items="dashboardStats.RecentTasks.Take(5)" Dense="true" Hover="true" Elevation="0">
                            <HeaderContent>
                                <MudTh>Title</MudTh>
                                <MudTh>Status</MudTh>
                                <MudTh>Priority</MudTh>
                                <MudTh>Due</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Title">@context.Title</MudTd>
                                <MudTd DataLabel="Status">@context.Status</MudTd>
                                <MudTd DataLabel="Priority">@context.Priority</MudTd>
                                <MudTd DataLabel="Due">@context.DueDate?.ToString("MMM dd, yyyy")</MudTd>
                            </RowTemplate>
                        </MudTable>
                    }
                    else
                    {
                        <MudText Color="Color.Secondary">No recent tasks</MudText>
                    }
            </MudCardContent>
        </MudCard>
    }
</MudContainer>

@code {
    private bool isLoading = true;
    private DashboardStats? dashboardStats;
    private UserInfo? currentUser;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var statsTask = TaskService.GetDashboardStatsAsync();
            var userTask = AuthService.GetCurrentUserAsync();
            await Task.WhenAll(statsTask, userTask);
            dashboardStats = await statsTask;
            currentUser = await userTask;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading dashboard: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task OpenCreateTaskDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialogRef = await DialogService.ShowAsync<TaskManagement.Client.Components.ComponentCreateTask>("Create Task", options);
        var dr = await dialogRef.Result;
        if (dr?.Data is bool success && success)
        {
            // refresh dashboard stats to include the new task
            isLoading = true;
            StateHasChanged();
            try { dashboardStats = await TaskService.GetDashboardStatsAsync(); }
            finally { isLoading = false; }
        }
    }
}
