@page "/login"
@using TaskManagement.Client.Services
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation

<PageTitle>Login - Task Management</PageTitle>

<div class="login-card">
    <div class="login-header">
        <div class="login-logo">
            <i class="fas fa-tasks"></i>
        </div>
        <h2 class="login-title">Welcome Back</h2>
        <p class="login-subtitle">Sign in to your account</p>
    </div>

    <div class="login-body">
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger" role="alert">
                <i class="fas fa-exclamation-circle me-2"></i>
                @errorMessage
            </div>
        }

        <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin" class="login-form">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger mb-3" />

            <div class="form-group">
                <label for="email" class="form-label">Email Address</label>
                <div class="input-group">
                    <span class="input-group-text">
                        <i class="fas fa-envelope"></i>
                    </span>
                    <InputText id="email" class="form-control" @bind-Value="loginModel.Email" placeholder="Enter your email" />
                </div>
                <ValidationMessage For="@(() => loginModel.Email)" class="text-danger" />
            </div>

            <div class="form-group">
                <label for="password" class="form-label">Password</label>
                <div class="input-group">
                    <span class="input-group-text">
                        <i class="fas fa-lock"></i>
                    </span>
                    <InputText type="password" id="password" class="form-control" @bind-Value="loginModel.Password" placeholder="Enter your password" />
                </div>
                <ValidationMessage For="@(() => loginModel.Password)" class="text-danger" />
            </div>

            <div class="form-group d-flex justify-content-between align-items-center">
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="rememberMe">
                    <label class="form-check-label" for="rememberMe">
                        Remember me
                    </label>
                </div>
                <a href="#" class="forgot-password">Forgot password?</a>
            </div>

            <button type="submit" class="btn btn-primary btn-login w-100" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                    <span>Signing in...</span>
                }
                else
                {
                    <span>Sign In</span>
                }
            </button>
        </EditForm>

        <div class="login-footer">
            <p class="text-center">
                Don't have an account? 
                <a href="/register" class="register-link">Create Account</a>
            </p>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private bool isLoading = false;
    private string? errorMessage;

    public class LoginModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;

        [Required]
        public string Password { get; set; } = string.Empty;
    }

    private async Task HandleLogin()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            var request = new LoginRequest
            {
                Email = loginModel.Email,
                Password = loginModel.Password
            };

            var result = await AuthService.LoginAsync(request);
            
            if (result != null)
            {
                Navigation.NavigateTo("/dashboard");
            }
            else
            {
                errorMessage = "Invalid email or password";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Login failed: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}
