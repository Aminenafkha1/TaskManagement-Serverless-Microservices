@page "/login"
@using TaskManagement.Client.Services
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation

<PageTitle>Login - Task Management</PageTitle>

<MudContainer MaxWidth="MaxWidth.False" Class="pa-4" Style="min-height:100vh;display:flex;align-items:center;justify-content:center;">
    <MudPaper Elevation="0" Class="pa-6" Style="width:100%;max-width:480px;">
            <MudStack Spacing="2">
                <MudStack AlignItems="AlignItems.Center" Spacing="1">
                    <MudIcon Icon="@Icons.Material.Filled.TaskAlt" Size="Size.Large" Color="Color.Primary" />
                    <MudText Typo="Typo.h5" Align="Align.Center">Welcome back</MudText>
                    <MudText Typo="Typo.body2" Align="Align.Center">Sign in to your account</MudText>
                </MudStack>

                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    <MudAlert Severity="Severity.Error" Dense="true">@ErrorMessage</MudAlert>
                }

            <MudForm @ref="_form" Model="@loginModel" OnValidSubmit="HandleLogin">
                <MudTextField Label="Email"
                              For="@(() => loginModel.Email)"
                              @bind-Value="loginModel.Email"
                              Required="true"
                              RequiredError="Email is required" />

                <MudTextField Label="Password"
                              For="@(() => loginModel.Password)"
                              @bind-Value="loginModel.Password"
                              Required="true"
                              InputType="@(_showPassword? InputType.Text: InputType.Password)"
                              Adornment="Adornment.End"
                              AdornmentIcon="@(_showPassword? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                              OnAdornmentClick="@TogglePasswordVisibility" />

                <MudStack Direction="Row" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                    <MudCheckBox T="bool" @bind-Checked="_rememberMe" Label="Remember me" />
                    <MudLink Href="#" Disabled="true">Forgot password?</MudLink>
                </MudStack>

                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           FullWidth="true"
                           ButtonType="ButtonType.Submit"
                           Disabled="@_loading" OnClick="@(async () => await HandleLogin())">
                    @if (_loading)
                    {
                        <MudProgressCircular Indeterminate="true" Size="Size.Small" Class="me-2" />
                        <span>Signing in...</span>
                    }
                    else
                    {
                        <span>Sign In</span>
                    }
                </MudButton>
            </MudForm>

                <MudText Align="Align.Center" Typo="Typo.body2">
                    Don't have an account?
                    <MudLink Href="/register">Create Account</MudLink>
                </MudText>
            </MudStack>
    </MudPaper>
</MudContainer>

@code {
    private MudForm? _form;
    private LoginModel loginModel = new();
    private bool _loading = false;
    private bool _showPassword = false;
    private bool _rememberMe = false;
    private string? ErrorMessage;

    public class LoginModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;

        [Required]
        public string Password { get; set; } = string.Empty;
    }

    private void TogglePasswordVisibility() => _showPassword = !_showPassword;

    private async Task HandleLogin()
    {
        try
        {
            _loading = true;
            ErrorMessage = null;

            var request = new LoginRequest
            {
                Email = loginModel.Email,
                Password = loginModel.Password
            };

            var result = await AuthService.LoginAsync(request);
            
            if (result != null)
            {
                Navigation.NavigateTo("/dashboard");
            }
            else
            {
                ErrorMessage = "Invalid email or password";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Login failed: {ex.Message}";
        }
        finally
        {
            _loading = false;
        }
    }
}
