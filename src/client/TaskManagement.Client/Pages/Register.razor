@page "/register"
@using TaskManagement.Client.Services
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation

<PageTitle>Register - Task Management</PageTitle>

<MudContainer MaxWidth="MaxWidth.False" Class="pa-4" Style="min-height:100vh;display:flex;align-items:center;justify-content:center;">
    <MudPaper Elevation="0" Class="pa-6" Style="width:100%;max-width:560px;">
            <MudStack Spacing="2">
                <MudStack AlignItems="AlignItems.Center" Spacing="1">
                    <MudIcon Icon="@Icons.Material.Filled.PersonAdd" Size="Size.Large" Color="Color.Primary" />
                    <MudText Typo="Typo.h5" Align="Align.Center">Create Account</MudText>
                    <MudText Typo="Typo.body2" Align="Align.Center" Color="Color.Tertiary">Join our task management platform</MudText>
                </MudStack>

                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    <MudAlert Severity="Severity.Error" Dense="true">@ErrorMessage</MudAlert>
                }
                @if (!string.IsNullOrEmpty(SuccessMessage))
                {
                    <MudAlert Severity="Severity.Success" Dense="true">@SuccessMessage</MudAlert>
                }

                <MudForm @ref="_form" Model="@registerModel" OnValidSubmit="HandleRegister">
                    <MudTextField Label="First name" For="@(() => registerModel.FirstName)" @bind-Value="registerModel.FirstName" Required="true" />
                    <MudTextField Label="Last name" For="@(() => registerModel.LastName)" @bind-Value="registerModel.LastName" Required="true" />
                    <MudTextField Label="Email" For="@(() => registerModel.Email)" @bind-Value="registerModel.Email" Required="true" />
                    <MudTextField Label="Department" For="@(() => registerModel.Department)" @bind-Value="registerModel.Department" Required="true" />

                    <MudTextField Label="Password"
                                   For="@(() => registerModel.Password)"
                                   @bind-Value="registerModel.Password"
                                   Required="true"
                                   InputType="@(_showPassword ? InputType.Text : InputType.Password)"
                                   Adornment="Adornment.End"
                                   AdornmentIcon="@(_showPassword ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                                   OnAdornmentClick="@TogglePasswordVisibility" />

                    <MudTextField Label="Confirm password"
                                   For="@(() => registerModel.ConfirmPassword)"
                                   @bind-Value="registerModel.ConfirmPassword"
                                   Required="true"
                                   InputType="@(_showConfirmPassword ? InputType.Text : InputType.Password)"
                                   Adornment="Adornment.End"
                                   AdornmentIcon="@(_showConfirmPassword ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                                   OnAdornmentClick="@ToggleConfirmPasswordVisibility" />

                    <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" ButtonType="ButtonType.Submit" Disabled="@_loading">
                        @if (_loading)
                        {
                            <MudProgressCircular Indeterminate="true" Size="Size.Small" Class="me-2" />
                            <span>Creating account...</span>
                        }
                        else
                        {
                            <span>Create Account</span>
                        }
                    </MudButton>
                </MudForm>

                <MudText Align="Align.Center" Typo="Typo.body2">
                    Already have an account?
                    <MudLink Href="/login">Sign In</MudLink>
                </MudText>
            </MudStack>
    </MudPaper>
</MudContainer>

@code {
    private MudForm? _form;
    private RegisterModel registerModel = new();
    private string ErrorMessage = string.Empty;
    private string SuccessMessage = string.Empty;
    private bool _loading = false;
    private bool _showPassword = false;
    private bool _showConfirmPassword = false;

    private void TogglePasswordVisibility() => _showPassword = !_showPassword;
    private void ToggleConfirmPasswordVisibility() => _showConfirmPassword = !_showConfirmPassword;

    private async Task HandleRegister()
    {
        if (registerModel.Password != registerModel.ConfirmPassword)
        {
            ErrorMessage = "Passwords do not match.";
            return;
        }

        try
        {
            _loading = true;
            ErrorMessage = string.Empty;
            SuccessMessage = string.Empty;

            var request = new RegisterRequest
            {
                Email = registerModel.Email,
                FirstName = registerModel.FirstName,
                LastName = registerModel.LastName,
                Password = registerModel.Password,
                PhoneNumber = registerModel.Department
            };

            var result = await AuthService.RegisterAsync(request);
            
            if (result != null)
            {
                SuccessMessage = "Account created successfully! Redirecting to dashboard...";
                await Task.Delay(1200);
                Navigation.NavigateTo("/dashboard");
            }
            else
            {
                ErrorMessage = "Registration failed. Please check your information and try again.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    public class RegisterModel : IValidatableObject
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "First name is required")]
        [StringLength(50, MinimumLength = 2, ErrorMessage = "First name must be between 2 and 50 characters")]
        public string FirstName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Last name is required")]
        [StringLength(50, MinimumLength = 2, ErrorMessage = "Last name must be between 2 and 50 characters")]
        public string LastName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Department is required")]
        public string Department { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "Password must be at least 6 characters long")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "Please confirm your password")]
        public string ConfirmPassword { get; set; } = string.Empty;

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            if (Password != ConfirmPassword)
            {
                yield return new ValidationResult("Password and confirmation password do not match.", new[] { nameof(ConfirmPassword) });
            }
        }
    }
}
