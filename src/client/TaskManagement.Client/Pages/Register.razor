@page "/register"
@using TaskManagement.Client.Services
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation

<PageTitle>Register - Task Management</PageTitle>

<div class="register-card">
    <div class="register-header">
        <div class="register-logo">
            <i class="fas fa-user-plus"></i>
        </div>
        <h2 class="register-title">Create Account</h2>
        <p class="register-subtitle">Join our task management platform</p>
    </div>

    <div class="register-body">
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger" role="alert">
                <i class="fas fa-exclamation-circle me-2"></i>
                @errorMessage
            </div>
        }

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success" role="alert">
                <i class="fas fa-check-circle me-2"></i>
                @successMessage
            </div>
        }

        <EditForm Model="@registerModel" OnValidSubmit="@HandleRegister" class="register-form">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger mb-3" />

            <div class="form-group">
                <label for="firstName" class="form-label">First Name</label>
                <div class="input-group">
                    <span class="input-group-text">
                        <i class="fas fa-user"></i>
                    </span>
                    <InputText id="firstName" class="form-control" @bind-Value="registerModel.FirstName" placeholder="Enter your first name" />
                </div>
                <ValidationMessage For="@(() => registerModel.FirstName)" class="text-danger" />
            </div>

            <div class="form-group">
                <label for="lastName" class="form-label">Last Name</label>
                <div class="input-group">
                    <span class="input-group-text">
                        <i class="fas fa-user"></i>
                    </span>
                    <InputText id="lastName" class="form-control" @bind-Value="registerModel.LastName" placeholder="Enter your last name" />
                </div>
                <ValidationMessage For="@(() => registerModel.LastName)" class="text-danger" />
            </div>

            <div class="form-group">
                <label for="email" class="form-label">Email Address</label>
                <div class="input-group">
                    <span class="input-group-text">
                        <i class="fas fa-envelope"></i>
                    </span>
                    <InputText id="email" class="form-control" @bind-Value="registerModel.Email" placeholder="Enter your email" />
                </div>
                <ValidationMessage For="@(() => registerModel.Email)" class="text-danger" />
            </div>

            <div class="form-group">
                <label for="department" class="form-label">Department</label>
                <div class="input-group">
                    <span class="input-group-text">
                        <i class="fas fa-building"></i>
                    </span>
                    <InputText id="department" class="form-control" @bind-Value="registerModel.Department" placeholder="Enter your department" />
                </div>
                <ValidationMessage For="@(() => registerModel.Department)" class="text-danger" />
            </div>

            <div class="form-group">
                <label for="password" class="form-label">Password</label>
                <div class="input-group">
                    <span class="input-group-text">
                        <i class="fas fa-lock"></i>
                    </span>
                    <InputText type="password" id="password" class="form-control" @bind-Value="registerModel.Password" placeholder="Create a strong password" />
                </div>
                <ValidationMessage For="@(() => registerModel.Password)" class="text-danger" />
            </div>

            <div class="form-group">
                <label for="confirmPassword" class="form-label">Confirm Password</label>
                <div class="input-group">
                    <span class="input-group-text">
                        <i class="fas fa-lock"></i>
                    </span>
                    <InputText type="password" id="confirmPassword" class="form-control" @bind-Value="registerModel.ConfirmPassword" placeholder="Confirm your password" />
                </div>
                <ValidationMessage For="@(() => registerModel.ConfirmPassword)" class="text-danger" />
            </div>

            <button type="submit" class="btn btn-primary btn-register w-100" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                    <span>Creating Account...</span>
                }
                else
                {
                    <span>Create Account</span>
                }
            </button>
        </EditForm>

        <div class="register-footer">
            <p class="text-center">
                Already have an account? 
                <a href="/login" class="login-link">Sign In</a>
            </p>
        </div>
    </div>
</div>

@code {
    private RegisterModel registerModel = new();
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool isLoading = false;

    private async Task HandleRegister()
    {
        if (registerModel.Password != registerModel.ConfirmPassword)
        {
            errorMessage = "Passwords do not match.";
            return;
        }

        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            successMessage = string.Empty;

            var request = new RegisterRequest
            {
                Email = registerModel.Email,
                FirstName = registerModel.FirstName,
                LastName = registerModel.LastName,
                Password = registerModel.Password,
                PhoneNumber = registerModel.Department // Use department as phone number for now
            };

            var result = await AuthService.RegisterAsync(request);
            
            if (result != null)
            {
                successMessage = "Account created successfully! Redirecting to dashboard...";
                await Task.Delay(2000); // Show success message for 2 seconds
                Navigation.NavigateTo("/dashboard");
            }
            else
            {
                errorMessage = "Registration failed. Please check your information and try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    public class RegisterModel : IValidatableObject
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "First name is required")]
        [StringLength(50, MinimumLength = 2, ErrorMessage = "First name must be between 2 and 50 characters")]
        public string FirstName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Last name is required")]
        [StringLength(50, MinimumLength = 2, ErrorMessage = "Last name must be between 2 and 50 characters")]
        public string LastName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Department is required")]
        public string Department { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "Password must be at least 6 characters long")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "Please confirm your password")]
        public string ConfirmPassword { get; set; } = string.Empty;

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            if (Password != ConfirmPassword)
            {
                yield return new ValidationResult("Password and confirmation password do not match.", new[] { nameof(ConfirmPassword) });
            }
        }
    }
}
