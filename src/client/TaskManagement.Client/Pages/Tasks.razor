@page "/tasks"
@using TaskManagement.Client.Services
@using Microsoft.AspNetCore.Authorization
@inject ITaskService TaskService
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<PageTitle>My Tasks</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col">
            <h1 class="h3 mb-0 text-gray-800">My Tasks</h1>
        </div>
        <div class="col-auto">
            <button class="btn btn-primary" @onclick="NavigateToCreateTask">
                <i class="fas fa-plus"></i> Create New Task
            </button>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
    }
    else if (tasks == null || !tasks.Any())
    {
        <div class="card">
            <div class="card-body text-center">
                <h5 class="card-title">No Tasks Found</h5>
                <p class="card-text">You haven't created any tasks yet.</p>
                <button class="btn btn-primary" @onclick="NavigateToCreateTask">
                    Create Your First Task
                </button>
            </div>
        </div>
    }
    else
    {
        <!-- Filter and Sort Controls -->
        <div class="row mb-3">
            <div class="col-md-4">
                <select class="form-select" @bind="selectedStatus" @bind:after="FilterTasks">
                    <option value="">All Statuses</option>
                    <option value="ToDo">To Do</option>
                    <option value="InProgress">In Progress</option>
                    <option value="Completed">Completed</option>
                    <option value="Cancelled">Cancelled</option>
                </select>
            </div>
            <div class="col-md-4">
                <select class="form-select" @bind="selectedPriority" @bind:after="FilterTasks">
                    <option value="">All Priorities</option>
                    <option value="Low">Low</option>
                    <option value="Medium">Medium</option>
                    <option value="High">High</option>
                    <option value="Critical">Critical</option>
                </select>
            </div>
            <div class="col-md-4">
                <input type="text" class="form-control" placeholder="Search tasks..." 
                       @bind="searchTerm" @bind:after="FilterTasks" />
            </div>
        </div>

        <!-- Tasks Table -->
        <div class="card shadow">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Tasks (@filteredTasks.Count())</h6>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-bordered" width="100%" cellspacing="0">
                        <thead>
                            <tr>
                                <th>Title</th>
                                <th>Status</th>
                                <th>Priority</th>
                                <th>Due Date</th>
                                <th>Created</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var task in filteredTasks)
                            {
                                <tr>
                                    <td>
                                        <div>
                                            <strong>@task.Title</strong>
                                            @if (!string.IsNullOrEmpty(task.Description))
                                            {
                                                <br />
                                                <small class="text-muted">@(task.Description.Length > 50 ? task.Description.Substring(0, 50) + "..." : task.Description)</small>
                                            }
                                        </div>
                                    </td>
                                    <td>
                                        <span class="badge @GetStatusBadgeClass(task.Status)">
                                            @task.Status.ToString()
                                        </span>
                                    </td>
                                    <td>
                                        <span class="badge @GetPriorityBadgeClass(task.Priority)">
                                            @task.Priority.ToString()
                                        </span>
                                    </td>
                                    <td>
                                        @if (task.DueDate.HasValue)
                                        {
                                            <span class="@GetDueDateClass(task.DueDate.Value)">
                                                @task.DueDate.Value.ToString("MM/dd/yyyy")
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">No due date</span>
                                        }
                                    </td>
                                    <td>@task.CreatedAt.ToString("MM/dd/yyyy")</td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <button class="btn btn-sm btn-outline-primary" 
                                                    @onclick="() => ViewTask(task.Id)">
                                                <i class="fas fa-eye"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-secondary" 
                                                    @onclick="() => EditTask(task.Id)">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-danger" 
                                                    @onclick="() => DeleteTask(task.Id)">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<Models.TaskItem> tasks = new();
    private IEnumerable<Models.TaskItem> filteredTasks = new List<Models.TaskItem>();
    private bool isLoading = true;
    private string selectedStatus = "";
    private string selectedPriority = "";
    private string searchTerm = "";

    protected override async Task OnInitializedAsync()
    {
        if (!await AuthService.IsAuthenticatedAsync())
        {
            Navigation.NavigateTo("/login");
            return;
        }

        await LoadTasks();
    }

    private async Task LoadTasks()
    {
        isLoading = true;
        try
        {
            tasks = await TaskService.GetMyTasksAsync();
            FilterTasks();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading tasks: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void FilterTasks()
    {
        filteredTasks = tasks.Where(t =>
            (string.IsNullOrEmpty(selectedStatus) || t.Status.ToString() == selectedStatus) &&
            (string.IsNullOrEmpty(selectedPriority) || t.Priority.ToString() == selectedPriority) &&
            (string.IsNullOrEmpty(searchTerm) || 
             t.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
             (!string.IsNullOrEmpty(t.Description) && t.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)))
        ).OrderByDescending(t => t.CreatedAt);
    }

    private void NavigateToCreateTask()
    {
        Navigation.NavigateTo("/tasks/create");
    }

    private void ViewTask(Guid taskId)
    {
        Navigation.NavigateTo($"/tasks/{taskId}");
    }

    private void EditTask(Guid taskId)
    {
        Navigation.NavigateTo($"/tasks/{taskId}/edit");
    }

    private async Task DeleteTask(Guid taskId)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this task?"))
        {
            try
            {
                await TaskService.DeleteTaskAsync(taskId);
                await LoadTasks();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting task: {ex.Message}");
            }
        }
    }

    private string GetStatusBadgeClass(Models.TaskStatus status)
    {
        return status switch
        {
            Models.TaskStatus.Todo => "bg-secondary",
            Models.TaskStatus.InProgress => "bg-primary",
            Models.TaskStatus.Done => "bg-success",
            Models.TaskStatus.Cancelled => "bg-dark",
            _ => "bg-secondary"
        };
    }

    private string GetPriorityBadgeClass(Models.TaskPriority priority)
    {
        return priority switch
        {
            Models.TaskPriority.Low => "bg-info",
            Models.TaskPriority.Medium => "bg-warning",
            Models.TaskPriority.High => "bg-orange",
            Models.TaskPriority.Critical => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private string GetDueDateClass(DateTime dueDate)
    {
        var daysUntilDue = (dueDate.Date - DateTime.Now.Date).Days;
        return daysUntilDue switch
        {
            var d when d < 0 => "text-danger font-weight-bold", // Overdue
            0 => "text-warning font-weight-bold",  // Due today
            var d when d <= 3 => "text-warning",   // Due soon
            _ => "text-dark"                       // Not urgent
        };
    }
}
